david@david-1201T:~$ irb
irb(main):001:0> puts "hello world"
hello world
=> nil
irb(main):017:0> language = "Ruby"
=> "Ruby"
irb(main):018:0> puts "Hello, #{language}"
Hello, Ruby
=> nil
irb(main):019:0> language = "my Ruby"
=> "my Ruby"
irb(main):020:0> puts "Hello, #{language}"
Hello, my Ruby
=> nil
irb(main):021:0> 

irb(main):002:0> properties = ['object oriented', 'duck typed', 'productive','fun']
=> ["object oriented", "duck typed", "productive", "fun"]
irb(main):003:0> properties.each{|property | puts "Ruby is #{property}."}
Ruby is object oriented.
Ruby is duck typed.
Ruby is productive.
Ruby is fun.
=> ["object oriented", "duck typed", "productive", "fun"]

=> 4
irb(main):023:0> 4.class
=> Fixnum
irb(main):026:0> 4 + 4
=> 8
irb(main):027:0> 4.methods
=> [:to_s, :-@, :+, :-, :*, :/, :div, :%, :modulo, :divmod, :fdiv, :**, :abs, :magnitude, :==, :===, :<=>, :>, :>=, :<, :<=, :~, :&, :|, :^, :[], :<<, :>>, :to_f, :size, :zero?, :odd?, :even?, :succ, :integer?, :upto, :downto, :times, :next, :pred, :chr, :ord, :to_i, :to_int, :floor, :ceil, :truncate, :round, :gcd, :lcm, :gcdlcm, :numerator, :denominator, :to_r, :rationalize, :singleton_method_added, :coerce, :i, :+@, :eql?, :quo, :remainder, :real?, :nonzero?, :step, :to_c, :real, :imaginary, :imag, :abs2, :arg, :angle, :phase, :rectangular, :rect, :polar, :conjugate, :conj, :between?, :nil?, :=~, :!~, :hash, :class, :singleton_class, :clone, :dup, :initialize_dup, :initialize_clone, :taint, :tainted?, :untaint, :untrust, :untrusted?, :trust, :freeze, :frozen?, :inspect, :methods, :singleton_methods, :protected_methods, :private_methods, :public_methods, :instance_variables, :instance_variable_get, :instance_variable_set, :instance_variable_defined?, :instance_of?, :kind_of?, :is_a?, :tap, :send, :public_send, :respond_to?, :respond_to_missing?, :extend, :display, :method, :public_method, :define_singleton_method, :object_id, :to_enum, :enum_for, :equal?, :!, :!=, :instance_eval, :instance_exec, :__send__, :__id__]
//Number is an Object that has a class called Fixnum. Above are methods that Fixnum has
// Methods can be called with dot operator
irb(main):028:0> 4.next
=> 5
irb(main):032:0> 4.odd?
=> false
irb(main):033:0> 4.even?
=> true

irb(main):036:0> x = 4
=> 4
irb(main):037:0> x < 5
=> true
irb(main):038:0> x <= 4
=> true
irb(main):040:0> x > 4
=> false

irb(main):041:0> false.class
=> FalseClass
irb(main):042:0> true.class
=> TrueClass

irb(main):043:0> puts 'This appears to be false.' unless x == 4
=> nil
irb(main):044:0> puts 'This appears to be true.' if x == 4
This appears to be true.
=> nil

irb(main):045:0> if x == 4
irb(main):046:1>  puts 'This appears to be true.'
irb(main):047:1> end
This appears to be true.
=> nil

irb(main):048:0> unless x == 4
irb(main):049:1>  puts 'This appears to be false.'
irb(main):050:1> else
irb(main):051:1*  puts 'This appears to be true.'
irb(main):052:1> end
This appears to be true.
=> nil
irb(main):061:0> unless x == 4
irb(main):062:1> puts 'false'
irb(main):063:1> else
irb(main):064:1* puts x
irb(main):065:1> end
4
=> nil

irb(main):080:0> order.even? unless order.nil?
=> true
irb(main):081:0> order = 0
=> 0
irb(main):082:0> order.even? unless order.nil?
=> true
irb(main):083:0> order = nil
=> nil
irb(main):084:0> order.even? unless order.nil?
=> nil

irb(main):100:0> order
=> 10
irb(main):099:0> order.even? unless order.zero?
=> true

irb(main):101:0> order = 5
=> 5
irb(main):102:0> order.even? unless order.zero?
=> false

irb(main):103:0> order = 0
=> 0
irb(main):104:0> order.even? unless order.zero?
=> nil
irb(main):105:0> 


irb(main):053:0>  puts 'This appears to be true.' if not true
=> nil
irb(main):054:0>  puts 'This appears to be true.' if !true
=> nil
irb(main):055:0> 

irb(main):117:0> x
=> 1
irb(main):118:0> x
=> 1
irb(main):119:0> x = x + 1 while x < 10
=> nil
irb(main):120:0> x
=> 10
irb(main):121:0> x = x -1 until x == 1
=> nil
irb(main):122:0> x
=> 1
irb(main):124:0> while x < 10
irb(main):125:1>  x = x + 1
irb(main):126:1>  puts x
irb(main):127:1> end
2
3
4
5
6
7
8
9
10
=> nil

irb(main):128:0> puts 'This appears to be true.' if 1
This appears to be true.
=> nil
irb(main):129:0> puts 'This appears to be true.' if 'randon string'
(irb):129: warning: string literal in condition
This appears to be true.
=> nil
irb(main):130:0> puts 'This appears to be true.' if 0
This appears to be true.
=> nil
irb(main):131:0> puts 'This appears to be true.' if true
This appears to be true.
=> nil
irb(main):132:0> puts 'This appears to be false.' if false
=> nil
irb(main):133:0> puts 'This appears to be false.' if nil

irb(main):156:0> true and false
=> false
irb(main):157:0> true or false
=> true
irb(main):158:0> true && false
=> false
irb(main):159:0> true && nil
=> nil
irb(main):160:0> true or nil
=> true
irb(main):161:0> false or nil
=> nil
irb(main):162:0> false and nil
=> false
irb(main):163:0> false && this_will_not_cause_an_error
=> false
irb(main):164:0> false or this_will_not_cause_an_error
NameError: undefined local variable or method `this_will_not_cause_an_error' for main:Object
	from (irb):164
	from /usr/bin/irb:12:in `<main>'
irb(main):165:0> true | this_will_not_cause_an_error
NameError: undefined local variable or method `this_will_not_cause_an_error' for main:Object
	from (irb):165
	from /usr/bin/irb:12:in `<main>'
irb(main):166:0> true || this_will_not_cause_an_error
=> true
irb(main):167:0> true || false
=> true

irb(main):002:0> 4.0.class
=> Float
irb(main):003:0> (4.0).class
=> Float
irb(main):004:0> 4 + 4.0
=> 8.0
irb(main):005:0> def add_them_up
irb(main):006:1> 4 + 4.0
irb(main):007:1> end
=> nil
irb(main):008:0> add_them_up
=> 8.0

irb(main):001:0> x = 0
=> 0
irb(main):002:0> a = ['100',100,0]
=> ["100", 100, 0]
irb(main):014:0> while x <= 2
irb(main):015:1> puts a[x].to_i
irb(main):016:1> x = x + 1
irb(main):017:1> end
100
100
0
=> nil

irb(main):008:0> a[0]
=> "100"
irb(main):010:0> a[0].to_i
=> 100


